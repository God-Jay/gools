// Code generated by protoc-gen-gin-http. DO NOT EDIT.
// versions:
// protoc-gen-gin-http v0.0.1
// source: user.proto

package pb

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	httprpc "github.com/god-jay/gools/grpc/httprpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = errors.New
var _ = binding.EncodeURL
var _ = gin.New
var _ = httprpc.Response{}

const _ = http.SupportPackageIsVersion1

type UserServiceHTTPServer interface {
	GetIndex(*gin.Context, *IndexRequest) (*IndexResponse, error)
}

func RegisterUserServiceHTTPServer(r gin.IRoutes, srv UserServiceHTTPServer) {
	r.POST("/user/index", _UserService_GetIndex0_HTTP_Handler(srv))
}

func _UserService_GetIndex0_HTTP_Handler(srv UserServiceHTTPServer) func(c *gin.Context) {
	return func(c *gin.Context) {
		var in IndexRequest
		if err := c.Bind(&in); err != nil {
			c.AbortWithStatusJSON(400, err.Error())
			return
		}
		out, err := srv.GetIndex(c, &in)
		if err != nil {
			var e *httprpc.ResponseError
			if errors.As(err, &e) {
				c.JSON(e.Code, e.Msg)
				c.Error(err)
				return
			}
			var ae *httprpc.AbortError
			if errors.As(err, &ae) {
				c.AbortWithStatusJSON(ae.Code, ae.Msg)
				return
			}
		} else {
			c.Render(200, httprpc.Response{out})
		}
	}
}

type UserServiceHTTPClient interface {
	GetIndex(ctx context.Context, req *IndexRequest, opts ...http.CallOption) (rsp *IndexResponse, err error)
}

type UserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserServiceHTTPClient(client *http.Client) UserServiceHTTPClient {
	return &UserServiceHTTPClientImpl{client}
}

func (c *UserServiceHTTPClientImpl) GetIndex(ctx context.Context, in *IndexRequest, opts ...http.CallOption) (*IndexResponse, error) {
	var out IndexResponse
	pattern := "/user/index"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pb.UserService/GetIndex"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
